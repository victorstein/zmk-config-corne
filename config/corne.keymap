/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

&led_strip { chain-length = <27>; };

/ {
    behaviors {
        hold_left: hold_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <19 20 21 22 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 38 39 37 24 16>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <60>;
        };

        hold_right: hold_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <13 14 15 16 0 1 2 3 4 5 12 13 14 15 16 17 26 27 28 29 0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 38 39>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <60>;
        };

        hold: hold {
            compatible = "zmk,behavior-hold-tap";
            label = "HOLD";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <500>;
            flavor = "tap-preferred";
        };

        brace_left: brace_left {
            compatible = "zmk,behavior-mod-morph";
            label = "BRACE_LEFT";
            bindings = <&kp LEFT_BRACE>, <&kp LEFT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        right_brace: right_brace {
            compatible = "zmk,behavior-mod-morph";
            label = "RIGHT_BRACE";
            bindings = <&kp RIGHT_BRACE>, <&kp RIGHT_BRACKET>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Layer_0 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC         &kp Q          &kp W          &kp E                      &kp R                    &hold LG(LS(T)) T    &kp Y      &kp U                      &kp I                        &kp O    &kp P     &kp BSPC
&kp LEFT_SHIFT  &hold LG(A) A  &hold LG(S) S  &hold_left LEFT_CONTROL D  &hold_left LEFT_SHIFT F  &kp G                &kp H      &hold_right RIGHT_SHIFT J  &hold_right RIGHT_CONTROL K  &kp L    &kp SEMI  &kp ENTER
&kp LGUI        &hold LG(Z) Z  &hold LG(X) X  &hold LG(C) C              &hold LG(V) V            &kp B                &kp N      &kp M                      &kp COMMA                    &kp DOT  &kp FSLH  &kp RIGHT_GUI
                                              &kp LEFT_CONTROL           &mo 1                    &kp TAB              &kp SPACE  &mo 2                      &kp RIGHT_ALT
            >;
        };

        Layer_1 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp GRAVE     &none     &kp UP    &none      &none   &none            &kp NUMBER_7  &kp NUMBER_8  &kp NUMBER_9  &kp MINUS  &kp EQUAL  &kp DELETE
&kp TILDE     &kp LEFT  &kp DOWN  &kp RIGHT  &none   &kp BACKSPACE    &kp NUMBER_4  &kp NUMBER_5  &kp NUMBER_6  &none      &none      &kp SINGLE_QUOTE
&kp LEFT_GUI  &none     &none     &none      &none   &kp ENTER        &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans     &trans     &trans
                                  &kp LCTRL  &trans  &kp SPACE        &kp SPACE     &kp NUMBER_0  &kp RALT
            >;
        };

        Layer_2 {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESCAPE  &kp EXCL      &kp AT        &kp HASH      &kp DLLR      &kp PRCNT     &kp CARET  &kp AMPS   &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp KP_ASTERISK  &kp BSPC
&tog 4      &trans        &trans        &trans        &trans        &none         &kp MINUS  &kp EQUAL  &brace_left           &right_brace           &kp BSLH         &kp DOUBLE_QUOTES
&kp LSHFT   &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR    &kp UNDER  &kp PLUS   &kp LESS_THAN         &kp GREATER_THAN       &kp PIPE         &kp TILDE
                                        &kp LGUI      &trans        &kp SPACE     &kp RET    &trans     &kp RALT
            >;
        };

        NVIM {
            bindings = <
&trans       &trans     &kp LC(K)  &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&kp CAPS     &kp LC(H)  &kp LC(J)  &kp LC(L)  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans
&bootloader  &trans     &trans     &trans     &trans  &trans    &trans  &trans  &trans  &trans  &trans  &bootloader
                                   &trans     &trans  &trans    &trans  &trans  &trans
            >;
        };

        LOL {
            bindings = <
&kp ESC  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp NUMBER_4  &kp N5    &trans  &trans  &trans  &trans  &trans  &trans
&kp TAB  &kp Q         &kp W         &kp E         &kp R         &kp T     &trans  &trans  &trans  &trans  &trans  &trans
&kp Y    &kp A         &kp S         &kp D         &kp F         &kp G     &trans  &trans  &trans  &trans  &trans  &trans
                                     &tog 4        &trans        &kp B     &trans  &trans  &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        NVIM_CD {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
